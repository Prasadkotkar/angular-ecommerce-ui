{"ast":null,"code":"import { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProductService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    // private baseUrl = 'http://localhost:8081/api/products?size=100';\n    this.baseUrl = 'http://localhost:8081/api/products';\n    this.categoryUrl = 'http://localhost:8081/api/product-category';\n  }\n  getProductList(theCategoryId) {\n    // need to build URL base on category id +\n    const searchUrl = `${this.baseUrl}/search/findByCategoryId?id=${theCategoryId}`;\n    return this.httpClient.get(searchUrl).pipe(map(response => response._embedded.products));\n  }\n  searchProducts(theKeyword) {\n    throw new Error('Method not implemented.');\n  }\n  getProductCategories() {\n    return this.httpClient.get(this.categoryUrl).pipe(map(response => response._embedded.productCategory));\n  }\n}\nProductService.ɵfac = function ProductService_Factory(t) {\n  return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient));\n};\nProductService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProductService,\n  factory: ProductService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAIA,SAASA,GAAG,QAAQ,MAAM;;;AAM1B,OAAM,MAAOC,cAAc;EAMzBC,YAAoBC,UAAsB;IAAtB,eAAU,GAAVA,UAAU;IAJ9B;IACQ,YAAO,GAAG,oCAAoC;IAE9C,gBAAW,GAAG,4CAA4C;EACpB;EAE9CC,cAAc,CAACC,aAAqB;IAEhC;IACA,MAAMC,SAAS,GAAG,GAAG,IAAI,CAACC,OAAO,+BAA+BF,aAAa,EAAE;IAG/E,OAAO,IAAI,CAACF,UAAU,CAACK,GAAG,CAAqBF,SAAS,CAAC,CACjDG,IAAI,CAACT,GAAG,CAACU,QAAQ,IAAIA,QAAQ,CAACC,SAAS,CAACC,QAAQ,CAAC,CACjD;EACZ;EACFC,cAAc,CAACC,UAAkB;IAC7B,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;EAC5C;EAEAC,oBAAoB;IAChB,OAAO,IAAI,CAACb,UAAU,CAACK,GAAG,CAA6B,IAAI,CAACS,WAAW,CAAC,CACjER,IAAI,CAACT,GAAG,CAACU,QAAQ,IAAIA,QAAQ,CAACC,SAAS,CAACO,eAAe,CAAC,CACxD;EACX;;AA1BWjB,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAkB,SAAdlB,cAAc;EAAAmB,YAFb;AAAM","names":["map","ProductService","constructor","httpClient","getProductList","theCategoryId","searchUrl","baseUrl","get","pipe","response","_embedded","products","searchProducts","theKeyword","Error","getProductCategories","categoryUrl","productCategory","factory","providedIn"],"sourceRoot":"","sources":["D:\\Project\\fullstack-angular-and-springboot\\Project files\\03-frontend\\angular-ecommerce-ui\\src\\app\\services\\product.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Product } from '../common/product';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs';\nimport { ProductCategory } from '../common/product-category';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductService {\n  \n  // private baseUrl = 'http://localhost:8081/api/products?size=100';\n  private baseUrl = 'http://localhost:8081/api/products';\n\n  private categoryUrl = 'http://localhost:8081/api/product-category';\n  constructor(private httpClient: HttpClient) { };\n\n  getProductList(theCategoryId: number): Observable<Product[]> {\n\n      // need to build URL base on category id +\n      const searchUrl = `${this.baseUrl}/search/findByCategoryId?id=${theCategoryId}`;\n\n\n      return this.httpClient.get<GetResponseProduct>(searchUrl)\n             .pipe(map(response => response._embedded.products)\n             );\n  }\nsearchProducts(theKeyword: string) {\n    throw new Error('Method not implemented.');\n  }\n  \n  getProductCategories(): Observable<ProductCategory[]> {\n      return this.httpClient.get<GetResponseProductCategory>(this.categoryUrl)\n            .pipe(map(response => response._embedded.productCategory)\n            );\n  }\n}\n\ninterface GetResponseProduct {\n    _embedded: {\n      products: Product[];\n    }\n}\n\ninterface GetResponseProductCategory {\n  _embedded: {\n    productCategory: ProductCategory[];\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}