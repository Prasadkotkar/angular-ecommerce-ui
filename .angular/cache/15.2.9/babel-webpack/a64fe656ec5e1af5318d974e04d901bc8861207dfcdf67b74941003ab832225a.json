{"ast":null,"code":"import { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProductService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.baseUrl = 'http://localhost:8081/api/products?size=100';\n  }\n  getProductList(theCategoryid) {\n    // @TODO: need to build URL base on category id ..later\n    return this.httpClient.get(this.baseUrl).pipe(map(response => response._embedded.products));\n  }\n}\nProductService.ɵfac = function ProductService_Factory(t) {\n  return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient));\n};\nProductService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProductService,\n  factory: ProductService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAIA,SAASA,GAAG,QAAQ,MAAM;;;AAK1B,OAAM,MAAOC,cAAc;EAIzBC,YAAoBC,UAAsB;IAAtB,eAAU,GAAVA,UAAU;IAFtB,YAAO,GAAG,6CAA6C;EAEjB;EAE9CC,cAAc,CAACC,aAAqB;IAEhC;IAEA,OAAO,IAAI,CAACF,UAAU,CAACG,GAAG,CAAc,IAAI,CAACC,OAAO,CAAC,CAC7CC,IAAI,CAACR,GAAG,CAACS,QAAQ,IAAIA,QAAQ,CAACC,SAAS,CAACC,QAAQ,CAAC,CACjD;EACZ;;AAbWV,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAW,SAAdX,cAAc;EAAAY,YAFb;AAAM","names":["map","ProductService","constructor","httpClient","getProductList","theCategoryid","get","baseUrl","pipe","response","_embedded","products","factory","providedIn"],"sourceRoot":"","sources":["D:\\Project\\fullstack-angular-and-springboot\\Project files\\03-frontend\\angular-ecommerce-ui\\src\\app\\services\\product.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Product } from '../common/product';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductService {\n\n  private baseUrl = 'http://localhost:8081/api/products?size=100';\n\n  constructor(private httpClient: HttpClient) { }\n\n  getProductList(theCategoryid: number): Observable<Product[]> {\n\n      // @TODO: need to build URL base on category id ..later\n\n      return this.httpClient.get<GetResponse>(this.baseUrl)\n             .pipe(map(response => response._embedded.products)\n             );\n  }\n}\ninterface GetResponse {\n    _embedded: {\n      products: Product[];\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}